'''초보자 파이썬 300제 131~170'''
과일 = ["사과","귤","수박"]
for 변수 in 과일:
    print("####") #  for문의 핵심은 "들여쓰기된 코드가 자료구조에 저장된 데이터 개수만큼 반복된다"

for 변수 in ["A", "B", "C"]:
    print(변수)

for 변수 in [10, 20, 30]:
    print(변수)
    print("--------") # 변하는 부분은 for문과 함께 리스트로 처리하고 변하지 않는 코드는 들여쓰기와 함께 적어줍니다.

print("++++")
for 변수 in [10, 20, 30]:
  print(변수)

for 변수 in [1,2,3]:
    print("-----------") # 파이썬 for문은 들여쓰기된 코드가 자료구조의 데이터 개수만큼 반복된다는 사실이 중요합니다.

리스트 = [100, 200, 300]
for valialbe in 리스트:
      print( valialbe + 10)

리스트 = ["김밥", "라면", "튀김"]
for menu in 리스트:
      print("오늘의 메뉴:", 리스트[0])
      print("오늘의 메뉴:", 리스트[1])
      print("오늘의 메뉴:", 리스트[2])

리스트 = ["SK하이닉스", "삼성전자", "LG전자"]

for stock in 리스트:
    length = len(stock)
    print(length)

리스트 = ['dog', 'cat', 'parrot']
for 이름 in 리스트:
    print(이름,len(이름))
# 어렵게 느껴진다면 for문을 사용하지 않고 코드를 작성해봅시다. 
# 바인딩된 문자열의 인덱싱을 사용해서 첫 글자를 화면에 출력합니다.
이름 = "dog"
print(이름[0])
변수 = "cat"
print(이름[0])
변수 = "parrot"
print(이름[0])
리스트 = ['dog', 'cat', 'parrot']
for 이름 in 리스트: # 변하는 값은 for문의 자료구조 자리에, 변하지 않는 코드는 들여쓰기 후에 작성합니다. 
  print(이름[0])

리스트 = [1, 2, 3]
for 변수 in 리스트:             # 변수에 바인딩된 값이 숫자이기 때문에 
   print("3 x " + str(변수))    #문자로 변환 후에 문자열 연산을 사용할 수 있습니다.
# 1000 미만의 자연수에서 3의 배수와 5의 배수의 총합
# n = 1
# result = 0
# while n < 1000:
#     print(n)
#     n += 1
# for n in range(1, 1000):
#     if n % 3 == 0 or n % 5 == 0: # 이 문제에는 한 가지 함정이 있는데 3으로도 5로도 나누어지는 15와 같은 수를 
#         #이중으로 더해서는 안 된다는 점이다. 
#         #따라서 15와 같이 3의 배수도 되고 5의 배수도 되는 값이 이중으로 더해지지 않기 위해 or 연산자를 사용하였다.
#         result += n
#     print(n)
'''1부터 10,000까지 8이라는 숫자가 총 몇번 나오는가?

8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다.
(※ 예를들어 8808은 3, 8888은 4로 카운팅 해야 함)'''
print str(range(1,10001)).count('8')
